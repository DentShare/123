from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from dentshare_bot.states import RegistrationStates
from dentshare_bot.database import async_session
from dentshare_bot.models import User
from dentshare_bot.config import ADMIN_SECRET
from dentshare_bot.keyboards.main_menu import get_dentist_main_menu, get_technician_main_menu

router = Router()

# –°—Ç–∞—Ä—Ç ‚Äî –≤—ã–±–æ—Ä —Ä–æ–ª–∏
@router.message(F.text == "/start")
async def reg_start(message: Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="ü¶∑ –Ø —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥"),
                KeyboardButton(text="üè≠ –Ø —Ç–µ—Ö–Ω–∏–∫")
            ]
        ],
        resize_keyboard=True
    )
    await state.set_state(RegistrationStates.choosing_role)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=kb)

# FSM: –≤—ã–±–æ—Ä —Ä–æ–ª–∏
@router.message(RegistrationStates.choosing_role)
async def reg_choose_role(message: Message, state: FSMContext):
    role = None
    text = message.text.lower()
    if "—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥" in text:
        role = "dentist"
    elif "—Ç–µ—Ö–Ω–∏–∫" in text:
        role = "technician"
    elif "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" in text:
        role = "admin"
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ä–æ–ª–µ–π –∫–Ω–æ–ø–∫–æ–π.")
        return

    await state.update_data(role=role)
    if role == "admin":
        await state.set_state(RegistrationStates.confirming)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=ReplyKeyboardRemove())
    else:
        await state.set_state(RegistrationStates.entering_full_name)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û:", reply_markup=ReplyKeyboardRemove())

# FSM: –§–ò–û
@router.message(RegistrationStates.entering_full_name)
async def reg_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await state.set_state(RegistrationStates.entering_phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω:")

# FSM: –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω
@router.message(RegistrationStates.entering_phone)
async def reg_phone(message: Message, state: FSMContext):
    await state.update_data(phone_main=message.text)
    skip_kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
        resize_keyboard=True
    )
    await state.set_state(RegistrationStates.entering_extra_phones)
    await message.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):", reply_markup=skip_kb)

# FSM: –¥–æ–ø. —Ç–µ–ª–µ—Ñ–æ–Ω—ã
@router.message(RegistrationStates.entering_extra_phones)
async def reg_extra_phones(message: Message, state: FSMContext):
    if "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" in message.text.lower():
        await state.update_data(phone_extra="")
    else:
        await state.update_data(phone_extra=message.text)
    await state.set_state(RegistrationStates.entering_org_name)
    await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–Ω–∏–∫–∏/–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏:", reply_markup=ReplyKeyboardRemove())

# FSM: –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
@router.message(RegistrationStates.entering_org_name)
async def reg_org_name(message: Message, state: FSMContext):
    await state.update_data(clinic_lab_name=message.text)
    await state.set_state(RegistrationStates.entering_org_addresses)
    await message.answer("–ê–¥—Ä–µ—Å(–∞) –∫–ª–∏–Ω–∏–∫–∏/–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏:")

# FSM: –∞–¥—Ä–µ—Å–∞
@router.message(RegistrationStates.entering_org_addresses)
async def reg_org_addr(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    data = await state.get_data()
    text = (
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–†–æ–ª—å: {data.get('role', '-')}\n"
        f"–§–ò–û: {data.get('full_name', '-')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone_main', '-')}\n"
        f"–î–æ–ø. —Ç–µ–ª–µ—Ñ–æ–Ω—ã: {data.get('phone_extra', '-')}\n"
        f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {data.get('clinic_lab_name', '-')}\n"
        f"–ê–¥—Ä–µ—Å: {data.get('address', '-')}"
    )
    confirm_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
            [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    await state.set_state(RegistrationStates.confirming)
    await message.answer(text, reply_markup=confirm_kb)

# FSM: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.message(RegistrationStates.confirming)
async def reg_confirm(message: Message, state: FSMContext):
    data = await state.get_data()
    text = message.text.lower().strip()
    role = data.get("role")

    if role == "admin":
        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω–∞
        pass
    elif "–ø–æ–¥—Ç–≤–µ—Ä–¥" in text:
        # –∑–¥–µ—Å—å —Ä–∞–∑–º–µ—â–∞–π –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–Ω—é!
        await state.clear()
        if role == "dentist":
            await message.answer(
                "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–æ—Ç –≤–∞—à–µ –º–µ–Ω—é —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞:",
                reply_markup=get_dentist_main_menu()
            )
        elif role == "technician":
            await message.answer(
                "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–æ—Ç –≤–∞—à–µ –º–µ–Ω—é —Ç–µ—Ö–Ω–∏–∫–∞:",
                reply_markup=get_technician_main_menu()
            )
        else:
            await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=ReplyKeyboardRemove())
    else:
        await state.clear()
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())