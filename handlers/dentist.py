# app/handlers/dentist.py

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from dentshare_bot.states import DentistMenuStates, OrderFSM
from dentshare_bot.crud import get_orders_by_dentist, create_order, add_lab
from dentshare_bot.models import Order

router = Router()

# --- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞—Ä—è–¥–∞ ---

@router.message(F.text == "üìù –ù–æ–≤—ã–π –Ω–∞—Ä—è–¥")
async def new_order_start(message: Message, state: FSMContext):
    await state.set_state(OrderFSM.choose_lab)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—Ä—è–¥–∞:")

@router.message(OrderFSM.choose_lab)
async def order_choose_lab(message: Message, state: FSMContext):
    await state.update_data(lab_id=message.text)
    kb = ReplyKeyboardMarkup([["–ù–∞ –∑—É–±–∞—Ö", "–ù–∞ –∏–º–ø–ª–∞–Ω—Ç–∞—Ö"]], resize_keyboard=True)
    await state.set_state(OrderFSM.choose_location_type)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:", reply_markup=kb)

@router.message(OrderFSM.choose_location_type)
async def order_choose_location_type(message: Message, state: FSMContext):
    await state.update_data(place_type=message.text)
    kb = ReplyKeyboardMarkup([["–ö–æ—Ä–æ–Ω–∫–∞", "–ú–æ—Å—Ç"]], resize_keyboard=True)
    await state.set_state(OrderFSM.choose_construction_type)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:", reply_markup=kb)

@router.message(OrderFSM.choose_construction_type)
async def order_choose_construction_type(message: Message, state: FSMContext):
    await state.update_data(construction_type=message.text)
    await state.set_state(OrderFSM.choose_teeth)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∑—É–±–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 11,12,13):", reply_markup=ReplyKeyboardRemove())

@router.message(OrderFSM.choose_teeth)
async def order_choose_teeth(message: Message, state: FSMContext):
    nums = [int(x.strip()) for x in message.text.split(",") if x.strip().isdigit()]
    await state.update_data(teeth_numbers=nums)
    kb = ReplyKeyboardMarkup([["–¶–∏—Ä–∫–æ–Ω", "E.Max"], ["PMMA", "–ú–µ—Ç–∞–ª–ª–æ–∫–µ—Ä–∞–º–∏–∫–∞"], ["–†–µ—Ñ—Ä–∞–∫—Ç–æ—Ä"]], resize_keyboard=True)
    await state.set_state(OrderFSM.choose_material)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:", reply_markup=kb)

@router.message(OrderFSM.choose_material)
async def order_choose_material(message: Message, state: FSMContext):
    await state.update_data(material=message.text)
    kb = ReplyKeyboardMarkup(
        [["A1", "A2", "B1", "B2"], ["C1", "C2", "Bleach"]], resize_keyboard=True
    )
    await state.set_state(OrderFSM.choose_color)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:", reply_markup=kb)

@router.message(OrderFSM.choose_color)
async def order_choose_color(message: Message, state: FSMContext):
    await state.update_data(color=message.text)
    skip_kb = ReplyKeyboardMarkup([[KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]], resize_keyboard=True)
    await state.set_state(OrderFSM.upload_files)
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):", reply_markup=skip_kb)

@router.message(OrderFSM.upload_files)
async def order_upload_files(message: Message, state: FSMContext):
    has_file = not ("–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" in message.text.lower())
    await state.update_data(has_file=has_file)
    skip_kb = ReplyKeyboardMarkup([[KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]], resize_keyboard=True)
    await state.set_state(OrderFSM.add_comment)
    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –Ω–∞—Ä—è–¥—É (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):", reply_markup=skip_kb)

@router.message(OrderFSM.add_comment)
async def order_add_comment(message: Message, state: FSMContext):
    comment = "" if "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" in message.text.lower() else message.text
    await state.update_data(comment=comment)
    data = await state.get_data()
    text = (
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Ä—è–¥:\n"
        f"–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è: {data['lab_id']}\n"
        f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞: {data['place_type']}\n"
        f"–¢–∏–ø: {data['construction_type']}\n"
        f"–ó—É–±—ã: {', '.join(map(str, data['teeth_numbers']))}\n"
        f"–ú–∞—Ç–µ—Ä–∏–∞–ª: {data['material']}\n"
        f"–¶–≤–µ—Ç: {data['color']}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}\n"
        f"–§–∞–π–ª: {'–¥–∞' if data['has_file'] else '–Ω–µ—Ç'}"
    )
    kb = ReplyKeyboardMarkup(
        [[KeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")], [KeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")]],
        resize_keyboard=True
    )
    await state.set_state(OrderFSM.preview)
    await message.answer(text, reply_markup=kb)

@router.message(OrderFSM.preview, F.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def order_confirm(message: Message, state: FSMContext):
    data = await state.get_data()
    order_dict = {
        "dentist_id": message.from_user.id,
        "lab_id": int(data["lab_id"]),
        "comment": data["comment"],
        "status": "new"
        # –ü–æ–∑–∏—Ü–∏–∏ –∏ —Ñ–∞–π–ª—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ CRUD-—Ñ—É–Ω–∫—Ü–∏–∏
    }
    await create_order(order_dict)
    await state.clear()
    await message.answer("–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", reply_markup=ReplyKeyboardRemove())

@router.message(OrderFSM.preview, F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
async def order_edit(message: Message, state: FSMContext):
    await state.set_state(OrderFSM.choose_lab)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞—Ä—è–¥–∞:")

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ ---

@router.message(F.text == "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def dentist_my_orders(message: Message, state: FSMContext):
    orders = await get_orders_by_dentist(message.from_user.id)
    if not orders:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return
    text = "\n".join([f"#{o.id}: {o.status}" for o in orders])
    await message.answer("–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n" + text)

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ ---

@router.message(F.text == "üè≠ –ú–æ–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏")
async def dentist_labs(message: Message, state: FSMContext):
    await message.answer("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–π –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def dentist_settings(message: Message, state: FSMContext):
    await message.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")

# --- –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ---

@router.message(F.text == "‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
async def dentist_feedback(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–º!")
